import esbuild from 'esbuild'
import process from 'process'
import builtins from 'builtin-modules'
import sveltePlugin from 'esbuild-svelte'
import autoPreprocess from 'svelte-preprocess'
import fs from 'fs'
import path from 'path'

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`

const prod = process.argv[2] === 'production'
const pluginDir = '/Users/sunwei/github/sunwei/obsidian-vault/.obsidian/plugins/mdfriday';

// 构建完成后的回调函数，用于处理CSS文件
const onBuildComplete = (result) => {
	// 检查是否有 metafile 信息
	if (result && result.metafile) {
		// 查找所有输出的 CSS 文件
		const outputs = Object.keys(result.metafile.outputs).filter(file => file.endsWith('.css'));
		
		if (outputs.length > 0) {
			console.log(`Found CSS outputs: ${outputs.join(', ')}`);
			
			// 处理每个 CSS 文件
			outputs.forEach(cssFile => {
				if (prod) {
					// 生产模式：重命名为 styles.css
					if (cssFile !== 'styles.css' && fs.existsSync(cssFile)) {
						fs.renameSync(cssFile, 'styles.css');
						console.log(`Renamed ${cssFile} to styles.css`);
					}
				} else {
					// 开发模式：复制到插件目录
					if (fs.existsSync(cssFile)) {
						fs.copyFileSync(cssFile, path.join(pluginDir, 'styles.css'));
						console.log(`Copied ${cssFile} to ${path.join(pluginDir, 'styles.css')}`);
					}
				}
			});
		} else {
			console.log('No CSS files were generated');
		}
	} else {
		console.log('No build metadata available');
		
		// 后备方案：查找常见的 CSS 文件名
		const possibleCssFiles = ['main.css', 'bundle.css', 'index.css'];
		for (const cssFile of possibleCssFiles) {
			if (fs.existsSync(cssFile)) {
				if (prod) {
					fs.renameSync(cssFile, 'styles.css');
					console.log(`Renamed ${cssFile} to styles.css`);
				} else {
					fs.copyFileSync(cssFile, path.join(pluginDir, 'styles.css'));
					console.log(`Copied ${cssFile} to ${path.join(pluginDir, 'styles.css')}`);
				}
				break;
			}
		}
	}
};

const buildOptions = {
	banner: {
		js: banner,
	},
	entryPoints: ['src/main.ts'],
	bundle: true,
	define: {
		'process.env.NODE_ENV': prod ? '"production"' : '"development"',
	},
	external: [
		'obsidian',
		'electron',
		'@codemirror/autocomplete',
		'@codemirror/closebrackets',
		'@codemirror/collab',
		'@codemirror/commands',
		'@codemirror/comment',
		'@codemirror/fold',
		'@codemirror/gutter',
		'@codemirror/highlight',
		'@codemirror/history',
		'@codemirror/language',
		'@codemirror/lint',
		'@codemirror/matchbrackets',
		'@codemirror/panel',
		'@codemirror/rangeset',
		'@codemirror/rectangular-selection',
		'@codemirror/search',
		'@codemirror/state',
		'@codemirror/stream-parser',
		'@codemirror/text',
		'@codemirror/tooltip',
		'@codemirror/view',
		'@lezer/common',
		'@lezer/highlight',
		'@lezer/lr',
		...builtins,
	],
	format: 'cjs',
	watch: !prod,
	target: 'es2016',
	logLevel: 'info',
	sourcemap: prod ? false : 'inline',
	treeShaking: true,
	metafile: true, // 启用元数据输出以便追踪生成的文件
	plugins: [
		sveltePlugin({
			preprocess: autoPreprocess(),
			compilerOptions: {css: true},
		}),
	],
	outfile: prod ? 'main.js' : path.join(pluginDir, 'main.js'),
};

// 强制 CSS 提取为单独文件
buildOptions.loader = buildOptions.loader || {};
buildOptions.loader['.css'] = 'css';

esbuild
	.build(buildOptions)
	.then(onBuildComplete)
	.catch(() => process.exit(1))
